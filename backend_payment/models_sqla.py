# Code generated by d2a (https://github.com/walkframe/d2a).
# `.\manage.py sqla_codegen` at Mon May 27 10:11:02 2024 UTC.


from importlib import import_module

import sqlalchemy as sa
from sqlalchemy import types as default_types
from sqlalchemy.dialects import (
    postgresql as postgresql_types,
    mysql as mysql_types,
    oracle as oracle_types,
)
from sqlalchemy.ext.declarative import declarative_base
try:
    from geoalchemy2 import types as geotypes
except ImportError:
    pass



Base = declarative_base()


class CIText(default_types.String):
    '''DO NOT DELETE THIS CLASS'''
    __visit_name__ = 'CITEXT'


def GET_DEFAULT(path):
    '''DO NOT DELETE THIS FUNCTION'''

    module_path, model_name, field_name = path.rsplit(".", 2)
    try:
        module = import_module(module_path)
        model = getattr(module, model_name)
    except (ImportError, AttributeError):
        return None

    for field in model._meta.fields:
        if field.name == field_name:
            return field.default






class ContentType(Base):
    __tablename__ = 'django_content_type'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    app_label = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    model = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class LogEntry(Base):
    __tablename__ = 'django_admin_log'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    action_time = sa.Column(
        postgresql_types.TIMESTAMP(),
        default=GET_DEFAULT('django.contrib.admin.models.LogEntry.action_time'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="users_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    content_type_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="django_content_type.id", ondelete="SET_NULL"),
        primary_key=False,
        unique=False,
        nullable=True,
        autoincrement=True,
    )
    object_id = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    object_repr = sa.Column(
        postgresql_types.VARCHAR(length=200),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    action_flag = sa.Column(
        postgresql_types.SMALLINT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    change_message = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[django_admin_log.c.user_id]",
        remote_side=None,
    )
    content_type = sa.orm.relationship(
        'ContentType',
        foreign_keys="[django_admin_log.c.content_type_id]",
        remote_side=None,
    )


class GroupPermissions(Base):
    __tablename__ = 'auth_group_permissions'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    group_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="auth_group.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    permission_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="auth_permission.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    group = sa.orm.relationship(
        'Group',
        foreign_keys="[auth_group_permissions.c.group_id]",
        remote_side=None,
    )
    permission = sa.orm.relationship(
        'Permission',
        foreign_keys="[auth_group_permissions.c.permission_id]",
        remote_side=None,
    )


class Group(Base):
    __tablename__ = 'auth_group'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = sa.Column(
        postgresql_types.VARCHAR(length=150),
        primary_key=False,
        unique=True,
        nullable=False,
    )
    permissions = sa.orm.relationship(
        'Permission',
        secondary="auth_group_permissions",
        foreign_keys="[auth_group_permissions.c.group_id, auth_group_permissions.c.permission_id]",
        remote_side=None,
    )


class Permission(Base):
    __tablename__ = 'auth_permission'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = sa.Column(
        postgresql_types.VARCHAR(length=255),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    content_type_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="django_content_type.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    codename = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    content_type = sa.orm.relationship(
        'ContentType',
        foreign_keys="[auth_permission.c.content_type_id]",
        remote_side=None,
    )


class User(Base):
    __tablename__ = 'users_user'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    password = sa.Column(
        postgresql_types.VARCHAR(length=128),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    last_login = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    username = sa.Column(
        postgresql_types.VARCHAR(length=150),
        primary_key=False,
        unique=True,
        nullable=False,
    )
    email = sa.Column(
        postgresql_types.VARCHAR(length=254),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    role = sa.Column(
        postgresql_types.VARCHAR(length=20),
        default=GET_DEFAULT('users.models.User.role'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    balance = sa.Column(
        postgresql_types.FLOAT(),
        default=GET_DEFAULT('users.models.User.balance'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    tax = sa.Column(
        postgresql_types.FLOAT(),
        default=GET_DEFAULT('users.models.User.tax'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    is_superuser = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('users.models.User.is_superuser'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    is_staff = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('users.models.User.is_staff'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    is_active = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('users.models.User.is_active'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    groups = sa.orm.relationship(
        'Group',
        secondary="users_user_groups",
        foreign_keys="[users_user_groups.c.user_id, users_user_groups.c.group_id]",
        remote_side=None,
    )
    user_permissions = sa.orm.relationship(
        'Permission',
        secondary="users_user_user_permissions",
        foreign_keys="[users_user_user_permissions.c.user_id, users_user_user_permissions.c.permission_id]",
        remote_side=None,
    )


class Session(Base):
    __tablename__ = 'django_session'
    
    session_key = sa.Column(
        postgresql_types.VARCHAR(length=40),
        primary_key=True,
        unique=True,
        nullable=False,
    )
    session_data = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    expire_date = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class Token(Base):
    __tablename__ = 'authtoken_token'
    
    key = sa.Column(
        postgresql_types.VARCHAR(length=40),
        primary_key=True,
        unique=True,
        nullable=False,
    )
    user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="users_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    created = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[authtoken_token.c.user_id]",
        remote_side=None,
        uselist=False,
    )


class TokenProxy(Base):
    __tablename__ = 'authtoken_token'
    
    key = sa.Column(
        postgresql_types.VARCHAR(length=40),
        primary_key=True,
        unique=True,
        nullable=False,
    )
    user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="users_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    created = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[authtoken_token.c.user_id]",
        remote_side=None,
        uselist=False,
    )


class ClockedSchedule(Base):
    __tablename__ = 'django_celery_beat_clockedschedule'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    clocked_time = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class CrontabSchedule(Base):
    __tablename__ = 'django_celery_beat_crontabschedule'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    minute = sa.Column(
        postgresql_types.VARCHAR(length=240),
        default=GET_DEFAULT('django_celery_beat.models.CrontabSchedule.minute'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    hour = sa.Column(
        postgresql_types.VARCHAR(length=96),
        default=GET_DEFAULT('django_celery_beat.models.CrontabSchedule.hour'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    day_of_month = sa.Column(
        postgresql_types.VARCHAR(length=124),
        default=GET_DEFAULT('django_celery_beat.models.CrontabSchedule.day_of_month'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    month_of_year = sa.Column(
        postgresql_types.VARCHAR(length=64),
        default=GET_DEFAULT('django_celery_beat.models.CrontabSchedule.month_of_year'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    day_of_week = sa.Column(
        postgresql_types.VARCHAR(length=64),
        default=GET_DEFAULT('django_celery_beat.models.CrontabSchedule.day_of_week'),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class IntervalSchedule(Base):
    __tablename__ = 'django_celery_beat_intervalschedule'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    every = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    period = sa.Column(
        postgresql_types.VARCHAR(length=24),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class PeriodicTask(Base):
    __tablename__ = 'django_celery_beat_periodictask'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = sa.Column(
        postgresql_types.VARCHAR(length=200),
        primary_key=False,
        unique=True,
        nullable=False,
    )
    task = sa.Column(
        postgresql_types.VARCHAR(length=200),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    interval_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="django_celery_beat_intervalschedule.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=True,
        autoincrement=True,
    )
    crontab_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="django_celery_beat_crontabschedule.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=True,
        autoincrement=True,
    )
    solar_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="django_celery_beat_solarschedule.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=True,
        autoincrement=True,
    )
    clocked_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="django_celery_beat_clockedschedule.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=True,
        autoincrement=True,
    )
    args = sa.Column(
        postgresql_types.TEXT(),
        default=GET_DEFAULT('django_celery_beat.models.PeriodicTask.args'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    kwargs = sa.Column(
        postgresql_types.TEXT(),
        default=GET_DEFAULT('django_celery_beat.models.PeriodicTask.kwargs'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    queue = sa.Column(
        postgresql_types.VARCHAR(length=200),
        default=GET_DEFAULT('django_celery_beat.models.PeriodicTask.queue'),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    exchange = sa.Column(
        postgresql_types.VARCHAR(length=200),
        default=GET_DEFAULT('django_celery_beat.models.PeriodicTask.exchange'),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    routing_key = sa.Column(
        postgresql_types.VARCHAR(length=200),
        default=GET_DEFAULT('django_celery_beat.models.PeriodicTask.routing_key'),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    headers = sa.Column(
        postgresql_types.TEXT(),
        default=GET_DEFAULT('django_celery_beat.models.PeriodicTask.headers'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    priority = sa.Column(
        postgresql_types.INTEGER(),
        default=GET_DEFAULT('django_celery_beat.models.PeriodicTask.priority'),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    expires = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    expire_seconds = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    one_off = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('django_celery_beat.models.PeriodicTask.one_off'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    start_time = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    enabled = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('django_celery_beat.models.PeriodicTask.enabled'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    last_run_at = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    total_run_count = sa.Column(
        postgresql_types.INTEGER(),
        default=GET_DEFAULT('django_celery_beat.models.PeriodicTask.total_run_count'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    date_changed = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    description = sa.Column(
        postgresql_types.TEXT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    interval = sa.orm.relationship(
        'IntervalSchedule',
        foreign_keys="[django_celery_beat_periodictask.c.interval_id]",
        remote_side=None,
    )
    crontab = sa.orm.relationship(
        'CrontabSchedule',
        foreign_keys="[django_celery_beat_periodictask.c.crontab_id]",
        remote_side=None,
    )
    solar = sa.orm.relationship(
        'SolarSchedule',
        foreign_keys="[django_celery_beat_periodictask.c.solar_id]",
        remote_side=None,
    )
    clocked = sa.orm.relationship(
        'ClockedSchedule',
        foreign_keys="[django_celery_beat_periodictask.c.clocked_id]",
        remote_side=None,
    )


class PeriodicTasks(Base):
    __tablename__ = 'django_celery_beat_periodictasks'
    
    ident = sa.Column(
        postgresql_types.SMALLINT(),
        default=GET_DEFAULT('django_celery_beat.models.PeriodicTasks.ident'),
        primary_key=True,
        unique=True,
        nullable=False,
    )
    last_update = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class SolarSchedule(Base):
    __tablename__ = 'django_celery_beat_solarschedule'
    
    id = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    event = sa.Column(
        postgresql_types.VARCHAR(length=24),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    latitude = sa.Column(
        postgresql_types.NUMERIC(precision=9, scale=6),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    longitude = sa.Column(
        postgresql_types.NUMERIC(precision=9, scale=6),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class Profile(Base):
    __tablename__ = 'users_profile'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="users_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    first_name = sa.Column(
        postgresql_types.VARCHAR(length=30),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    last_name = sa.Column(
        postgresql_types.VARCHAR(length=150),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    my_filter = sa.Column(
        postgresql_types.JSONB(),
        default=GET_DEFAULT('users.models.Profile.my_filter'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    my_filter2 = sa.Column(
        postgresql_types.JSONB(),
        default=GET_DEFAULT('users.models.Profile.my_filter2'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    my_filter3 = sa.Column(
        postgresql_types.JSONB(),
        default=GET_DEFAULT('users.models.Profile.my_filter3'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    view_bad_warning = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('users.models.Profile.view_bad_warning'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[users_profile.c.user_id]",
        remote_side=None,
        uselist=False,
    )


class UserGroups(Base):
    __tablename__ = 'users_user_groups'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="users_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    group_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="auth_group.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[users_user_groups.c.user_id]",
        remote_side=None,
    )
    group = sa.orm.relationship(
        'Group',
        foreign_keys="[users_user_groups.c.group_id]",
        remote_side=None,
    )


class UserUserPermissions(Base):
    __tablename__ = 'users_user_user_permissions'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="users_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    permission_id = sa.Column(
        postgresql_types.INTEGER(),
        sa.ForeignKey(column="auth_permission.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[users_user_user_permissions.c.user_id]",
        remote_side=None,
    )
    permission = sa.orm.relationship(
        'Permission',
        foreign_keys="[users_user_user_permissions.c.permission_id]",
        remote_side=None,
    )


class WhiteListMerchant(Base):
    __tablename__ = 'users_whitelistmerchant'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = sa.Column(
        postgresql_types.VARCHAR(length=None),
        primary_key=False,
        unique=True,
        nullable=False,
    )
    email = sa.Column(
        postgresql_types.VARCHAR(length=254),
        primary_key=False,
        unique=True,
        nullable=False,
    )


class BalanceChange(Base):
    __tablename__ = 'payment_balancechange'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    create_at = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="users_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    amount = sa.Column(
        postgresql_types.FLOAT(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    comment = sa.Column(
        postgresql_types.VARCHAR(length=None),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    payment_id = sa.Column(
        postgresql_types.UUID(),
        sa.ForeignKey(column="payment_payment.id", ondelete="SET_NULL"),
        primary_key=False,
        unique=True,
        nullable=True,
    )
    user = sa.orm.relationship(
        'User',
        foreign_keys="[payment_balancechange.c.user_id]",
        remote_side=None,
    )
    payment = sa.orm.relationship(
        'Payment',
        foreign_keys="[payment_balancechange.c.payment_id]",
        remote_side=None,
        uselist=False,
    )


class Bank(Base):
    __tablename__ = 'payment_bank'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = sa.Column(
        postgresql_types.VARCHAR(length=None),
        primary_key=False,
        unique=True,
        nullable=False,
    )
    script_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="payment_phonescript.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    instruction = sa.Column(
        postgresql_types.VARCHAR(length=None),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    image = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    script = sa.orm.relationship(
        'PhoneScript',
        foreign_keys="[payment_bank.c.script_id]",
        remote_side=None,
    )


class CreditCard(Base):
    __tablename__ = 'payment_creditcard'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    card_number = sa.Column(
        postgresql_types.VARCHAR(length=19),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    owner_name = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    cvv = sa.Column(
        postgresql_types.VARCHAR(length=4),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    card_type = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    card_bank = sa.Column(
        postgresql_types.VARCHAR(length=50),
        default=GET_DEFAULT('payment.models.CreditCard.card_bank'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    expired_month = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    expired_year = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    status = sa.Column(
        postgresql_types.VARCHAR(length=None),
        default=GET_DEFAULT('payment.models.CreditCard.status'),
        primary_key=False,
        unique=False,
        nullable=False,
    )


class Merchant(Base):
    __tablename__ = 'payment_merchant'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    owner_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="users_user.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    host = sa.Column(
        postgresql_types.VARCHAR(length=200),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    secret = sa.Column(
        postgresql_types.VARCHAR(length=1000),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    pay_success_endpoint = sa.Column(
        postgresql_types.VARCHAR(length=200),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    owner = sa.orm.relationship(
        'User',
        foreign_keys="[payment_merchant.c.owner_id]",
        remote_side=None,
    )


class PayRequisite(Base):
    __tablename__ = 'payment_payrequisite'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    pay_type = sa.Column(
        postgresql_types.VARCHAR(length=None),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    card_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="payment_creditcard.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=True,
        autoincrement=True,
    )
    is_active = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('payment.models.PayRequisite.is_active'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    info = sa.Column(
        postgresql_types.VARCHAR(length=None),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    min_amount = sa.Column(
        postgresql_types.INTEGER(),
        default=GET_DEFAULT('payment.models.PayRequisite.min_amount'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    max_amount = sa.Column(
        postgresql_types.INTEGER(),
        default=GET_DEFAULT('payment.models.PayRequisite.max_amount'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    card = sa.orm.relationship(
        'CreditCard',
        foreign_keys="[payment_payrequisite.c.card_id]",
        remote_side=None,
    )


class Payment(Base):
    __tablename__ = 'payment_payment'
    
    id = sa.Column(
        postgresql_types.UUID(),
        default=GET_DEFAULT('payment.models.Payment.id'),
        primary_key=True,
        unique=True,
        nullable=False,
    )
    merchant_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="payment_merchant.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=False,
        autoincrement=True,
    )
    order_id = sa.Column(
        postgresql_types.VARCHAR(length=36),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    amount = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    user_login = sa.Column(
        postgresql_types.VARCHAR(length=36),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    owner_name = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    pay_requisite_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="payment_payrequisite.id", ondelete="CASCADE"),
        primary_key=False,
        unique=False,
        nullable=True,
        autoincrement=True,
    )
    pay_type = sa.Column(
        postgresql_types.VARCHAR(length=None),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    screenshot = sa.Column(
        postgresql_types.VARCHAR(length=100),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    create_at = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    status = sa.Column(
        postgresql_types.INTEGER(),
        default=GET_DEFAULT('payment.models.Payment.status'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    change_time = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    cc_data_input_time = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    phone = sa.Column(
        postgresql_types.VARCHAR(length=20),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    referrer = sa.Column(
        postgresql_types.VARCHAR(length=200),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    card_data = sa.Column(
        postgresql_types.JSONB(),
        default=GET_DEFAULT('payment.models.Payment.card_data'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    phone_script_data = sa.Column(
        postgresql_types.JSONB(),
        default=GET_DEFAULT('payment.models.Payment.phone_script_data'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    confirmed_amount = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    confirmed_time = sa.Column(
        postgresql_types.TIMESTAMP(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    confirmed_user_id = sa.Column(
        postgresql_types.BIGINT(),
        sa.ForeignKey(column="users_user.id", ondelete="SET_NULL"),
        primary_key=False,
        unique=False,
        nullable=True,
        autoincrement=True,
    )
    comment = sa.Column(
        postgresql_types.VARCHAR(length=1000),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    response_status_code = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    source = sa.Column(
        postgresql_types.VARCHAR(length=5),
        default=GET_DEFAULT('payment.models.Payment.source'),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    merchant = sa.orm.relationship(
        'Merchant',
        foreign_keys="[payment_payment.c.merchant_id]",
        remote_side=None,
    )
    pay_requisite = sa.orm.relationship(
        'PayRequisite',
        foreign_keys="[payment_payment.c.pay_requisite_id]",
        remote_side=None,
    )
    confirmed_user = sa.orm.relationship(
        'User',
        foreign_keys="[payment_payment.c.confirmed_user_id]",
        remote_side=None,
    )


class PhoneScript(Base):
    __tablename__ = 'payment_phonescript'
    
    id = sa.Column(
        postgresql_types.BIGINT(),
        primary_key=True,
        unique=True,
        nullable=False,
        autoincrement=True,
    )
    name = sa.Column(
        postgresql_types.VARCHAR(length=None),
        primary_key=False,
        unique=True,
        nullable=False,
    )
    step_1 = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('payment.models.PhoneScript.step_1'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    step_2_required = sa.Column(
        mysql_types.BOOLEAN(),
        default=GET_DEFAULT('payment.models.PhoneScript.step_2_required'),
        primary_key=False,
        unique=False,
        nullable=False,
    )
    step_2_x = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    step_2_y = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    step_3_x = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
    step_3_y = sa.Column(
        postgresql_types.INTEGER(),
        primary_key=False,
        unique=False,
        nullable=True,
    )
